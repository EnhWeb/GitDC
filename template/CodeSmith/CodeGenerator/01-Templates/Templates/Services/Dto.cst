<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Register Name="TreeDto" Template="Trees/TreeDto.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Src="..\..\Common\Model.cs" %>
<%@ Assembly Src="..\..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="Namespace" Type="System.String" %>
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToSafeName(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
<%-- 如果是树型实体，则调用子模板 --%>
<%
if( Entity.IsTreeEntity() ){
    CodeTemplate template = new TreeDto();
    template.SetProperty("Namespace",Namespace);
    template.SetProperty("Entity",Entity);
    template.Render(this.Response);
    return;
}
%>
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Ding.Applications.Dtos;

namespace <%= string.Format("{0}.Service.Dtos.{1}",Namespace,Entity.TableSchema) %> {
    /// <summary>
    /// <%= Description %>数据传输对象
    /// </summary>
    public class <%= SafeClassName %>Dto : DtoBase {
        <% foreach(Property p in Entity.Properties) { %>
        <% if( p.IsPrimaryKey.SafeValue() ) continue; %>
        /// <summary>
        /// <%= p.Description %>
        /// </summary>
        <% if( p.HasValidate() ) {%>
        <%= p.Validate() %>
        <%}%>
        <%if(!string.IsNullOrEmpty(p.Description) && p.Description.IndexOf('(') > -1){ %>
        [Display( Name =  "<%= p.Description.Substring(0, p.Description.IndexOf('(')) %>" )]
        <%}else{ %>
        [Display( Name = "<%= p.Description %>" )]
        <%} %>
        <% if( p.DataType == DbType.Boolean ) { %>
        public bool? <%= p.PropertyName.ToSafeName() %> { get; set; }
        <% }else {%>
        <%if(p.IsHasDefault){ %>
        <%if(p.SystemType == typeof(string)){ %>
        public <%= p.TypeName %> <%= p.PropertyName.ToSafeName() %> { get; set; } = "<%=p.DefaultValue %>";
        <%}else if(p.SystemType == typeof(decimal)){ %>
        public <%= p.TypeName %> <%= p.PropertyName.ToSafeName() %> { get; set; } = <%=p.DefaultValue %>M;
        <%}else if(p.SystemType == typeof(DateTime)){ %>
        public <%= p.TypeName %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <%} else { %>
        public <%= p.TypeName %> <%= p.PropertyName.ToSafeName() %> { get; set; } = <%=p.DefaultValue %>;
        <%} %>
        <%}else{ %>
        public <%= p.TypeName %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <%} %>
        <% }%>
        <% }%>
    }
}